package com.persys.osmanager.organization;

import java.util.Locale;
import java.util.ResourceBundle;

import br.com.model.interfaces.IDepartamento;

import com.persys.osmanager.componente.ComponenteFactory;
import com.persys.osmanager.componente.helper.AttrDim;
import com.persys.osmanager.componente.interfaces.IForm;
import com.persys.osmanager.data.AppData;
import com.persys.osmanager.exception.ViewException;
import com.persys.osmanager.organization.data.TransactionsContainerDepartamento;
import com.persys.osmanager.organization.data.TransactionsContainerUnidade;
import com.restmb.RestMBClient;
import com.restmb.types.Unidade;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.ShortcutAction.ModifierKey;
import com.vaadin.ui.AbstractField;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class DepartamentoForm extends CustomComponent implements IForm<IDepartamento>{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private TextArea textAreaDescricao;
	private ComboBox comboBoxStatus;
	private TextField textFieldCodigo;
	private TextField textFieldNome;
	private TextField textFieldEmail;
	private TextField textFieldResponsavel;
	private TextField textFieldTelefone;
	private TextField textFieldRamal;
	private ComboBox comboBoxTipoDepartamento;
	private ComboBox comboBoxUnidade;
	private IDepartamento departamento;
	private final ComponenteFactory componenteFactory = new ComponenteFactory();

	private RestMBClient client = null;
	
	private final static ResourceBundle bundle;
	private static String error = null;
	
	static{
		 bundle = ResourceBundle.getBundle("com/persys/frontend/departamento",Locale.getDefault());
		 error = bundle.getString("requirederror");
	}
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public DepartamentoForm(RestMBClient client) {
		
		this.client = client;
		
		setWidth(AttrDim.FORM_WIDTH);
		setHeight(AttrDim.FORM_HEIGHT);
	
		setCompositionRoot(buildMainLayout());
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		VerticalLayout mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		mainLayout.addComponent(buildHorizontalLayoutCodigo());
				
		textFieldNome = componenteFactory.createTextFieldRequiredError(new TextField(), bundle.getString("name"), error,
				AttrDim.FORM_COM_SINGLE_WIDTH);
		textFieldNome.addShortcutListener(
		        new AbstractField.FocusShortcut(textFieldNome, KeyCode.ENTER,
		                                        ModifierKey.SHIFT));
		textFieldNome.focus();
		
		mainLayout.addComponent(textFieldNome);
		
		mainLayout.addComponent(buildHorizontalLayoutResEm());
	
		mainLayout.addComponent(buildHorizontalLayoutTipUni());
		
		mainLayout.addComponent(buildHorizontalLayoutTelefone());
		
		textAreaDescricao = new TextArea();
		textAreaDescricao.setCaption(bundle.getString("description"));
		textAreaDescricao.setImmediate(false);
		textAreaDescricao.setWidth(AttrDim.FORM_COM_SINGLE_WIDTH);
		textAreaDescricao.setHeight("-1px");
		mainLayout.addComponent(textAreaDescricao);
		
		return mainLayout;
	}

	@SuppressWarnings("deprecation")
	@AutoGenerated
	private HorizontalLayout buildHorizontalLayoutCodigo() {
		// common part: create layout
		HorizontalLayout horizontalLayout = createHorizontalLayout();
		
		// textFieldCodigo
		textFieldCodigo = new TextField();
		textFieldCodigo.setCaption(bundle.getString("code"));
		textFieldCodigo.setImmediate(false);
		textFieldCodigo.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		textFieldCodigo.setHeight("-1px");
		horizontalLayout.addComponent(textFieldCodigo);
	
		// comboBoxStatus
		comboBoxStatus = componenteFactory.createComboBoxRequiredError(new ComboBox(), bundle.getString("status"), error);
		comboBoxStatus.setContainerDataSource(AppData.listStatusInteger());
		comboBoxStatus.setItemCaptionMode(ComboBox.ITEM_CAPTION_MODE_PROPERTY);
		comboBoxStatus.setItemCaptionPropertyId("statusNome");
		comboBoxStatus.setNullSelectionAllowed(false);
		horizontalLayout.addComponent(comboBoxStatus);
			
		return horizontalLayout;
	}
	
	@AutoGenerated
	private HorizontalLayout buildHorizontalLayoutResEm() {
		HorizontalLayout horizontalLayout = createHorizontalLayout();
		
		textFieldEmail = componenteFactory.createTextFieldRequiredError(new TextField(), bundle.getString("email"), error);
		horizontalLayout.addComponent(textFieldEmail);
		
		textFieldResponsavel = componenteFactory.createTextFieldRequiredError(new TextField(), bundle.getString("responsible"), error);
		horizontalLayout.addComponent(textFieldResponsavel);
				
		return horizontalLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayoutTipUni() {
		
		HorizontalLayout horizontalLayout = createHorizontalLayout();
		
		comboBoxUnidade = componenteFactory.createComboBoxRequiredError(new ComboBox(), bundle.getString("unit"), error);
		comboBoxUnidade.setContainerDataSource(TransactionsContainerUnidade.listUnidade(client));
		comboBoxUnidade.setNullSelectionAllowed(false);
		
		horizontalLayout.addComponent(comboBoxUnidade);
		
		comboBoxTipoDepartamento = componenteFactory.createComboBoxRequiredError(new ComboBox(), bundle.getString("departamenttype"), error);
		comboBoxTipoDepartamento.setContainerDataSource(TransactionsContainerDepartamento.listDepartmentTypes());
		comboBoxTipoDepartamento.setNullSelectionAllowed(false);
		horizontalLayout.addComponent(comboBoxTipoDepartamento);
		
		return horizontalLayout;
	}
	 
	@AutoGenerated
	private HorizontalLayout buildHorizontalLayoutTelefone() {
		HorizontalLayout horizontalLayout = createHorizontalLayout();
		
		textFieldTelefone = componenteFactory.createTextFieldRequiredError(new TextField(), bundle.getString("phone"), error); 
		horizontalLayout.addComponent(textFieldTelefone);
		
		textFieldRamal = componenteFactory.createTextField(new TextField(), bundle.getString("extensionline")); 
		horizontalLayout.addComponent(textFieldRamal);
				
		return horizontalLayout;
	}
	
	private HorizontalLayout createHorizontalLayout() {
		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setImmediate(false);
		horizontalLayout.setWidth("-1px");
		horizontalLayout.setHeight("-1px");
		horizontalLayout.setMargin(false);
		horizontalLayout.setSpacing(true);
		return horizontalLayout;
	}
	
	@Override
	public IDepartamento commit() throws ViewException{
		try{
			componenteFactory.valida();
			
			departamento.setCodigo(textFieldCodigo.getValue());
			departamento.setNomeDepartamento(textFieldNome.getValue());
			departamento.setDescricao(textAreaDescricao.getValue());
			departamento.setResponsavel(textFieldResponsavel.getValue());
			departamento.setEmail(textFieldEmail.getValue());
			departamento.setTipo((String)comboBoxTipoDepartamento.getValue());
			departamento.setStatusModel((Integer)comboBoxStatus.getValue());
			departamento.setTelefone(textFieldTelefone.getValue());
			departamento.setRamal(textFieldRamal.getValue());
			departamento.setUnidade((Unidade)comboBoxUnidade.getValue());
			return departamento;
		}catch(Exception e){
			throw new ViewException(e.getMessage());
		}
	}

	@Override
	public void initData(IDepartamento data) {
		textAreaDescricao.setValue(data.getDescricao());
		textFieldCodigo.setValue(data.getCodigo());
		textFieldNome.setValue(data.getNomeDepartamento());
		textFieldEmail.setValue(data.getEmail());
		textFieldResponsavel.setValue(data.getResponsavel());
		comboBoxStatus.select(data.getStatusModel());
		comboBoxTipoDepartamento.select(data.getTipo());
		textFieldRamal.setValue(data.getRamal());
		textFieldTelefone.setValue(data.getTelefone());
		
		try{
			comboBoxUnidade.select(data.getUnidade());
		}catch(Exception e){}
		
		departamento = data;
	}
	
	@Override
	public void modoView() {
		textFieldCodigo.setReadOnly(true);
	}

	@Override
	public void modoAdd() {
		textFieldCodigo.setReadOnly(true);
	}
	    
}
