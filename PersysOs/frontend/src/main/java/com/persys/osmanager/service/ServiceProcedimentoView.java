package com.persys.osmanager.service;

import java.util.ArrayList;

import java.util.Locale;
import java.util.ResourceBundle;
import br.com.exception.ModelException;
import br.com.model.interfaces.IProcedimento;
import br.com.model.interfaces.IServico;
import br.com.model.interfaces.IServicoProcedimento;
import br.com.servico.model.ServicoProcedimento;
import com.persys.osmanager.componente.ComponenteFactory;
import com.persys.osmanager.componente.helper.AttrDim;
import com.persys.osmanager.componente.interfaces.IFormWindows;
import com.persys.osmanager.exception.ViewException;
import com.persys.osmanager.service.data.TransactionsContainerProcedimento;
import com.restmb.RestMBClient;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;

/**
 * @author ricardosabatine, jpmorijo
 * @version 1.0.0
 * @since 18/02/2013 View Para procedimento Servico
 */
public class ServiceProcedimentoView extends CustomComponent implements IFormWindows<IServicoProcedimento>{

	private static final long serialVersionUID = 1L;
	
	private Table tableService = null;

	private TransactionsContainer data = new TransactionsContainer();
	private SearchFormWindowProcedimento<IProcedimento> serviceFormWindows = null;

	private IServico servico;

	private static final ResourceBundle bundle;
	
	static{
		bundle=ResourceBundle.getBundle("com/persys/frontend/notification",
				Locale.getDefault());
	}

	RestMBClient client = null;
	
	public ServiceProcedimentoView(IServico servico, RestMBClient client) {
	
		this.client = client;
		this.servico = servico;
	
		setWidth(AttrDim.FORM_WIDTH);
		setHeight("100%");

		setCompositionRoot(buildMainLayout());

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		VerticalLayout mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
	
		// buttonSalvar
		Button buttonAdicionar = new Button(bundle.getString("addprocedure"),new Button.ClickListener() {
			private static final long serialVersionUID = 1L;

			public void buttonClick(ClickEvent event) {
				modoAdd();
			}
		});

		buttonAdicionar.setWidth("-1px");
		buttonAdicionar.setHeight("-1px");
		buttonAdicionar.setVisible(true);
		buttonAdicionar.addStyleName("wide");
		buttonAdicionar.addStyleName("default");
		mainLayout.addComponent(buttonAdicionar);
		mainLayout.setComponentAlignment(buttonAdicionar, new Alignment(34));
		mainLayout.addComponent(modoTabela());
		mainLayout.setExpandRatio(tableService, 1f);
		
		return mainLayout;
	}

	public Table modoTabela(){
		tableService = new Table() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			protected String formatPropertyValue(Object rowId, Object colId,
					Property<?> property) {

				return super.formatPropertyValue(rowId, colId, property);
			}
		};
		tableService.setSizeFull();
		tableService.addStyleName("borderless");
		tableService.setSelectable(true);
		tableService.setColumnCollapsingAllowed(true);
		tableService.setColumnReorderingAllowed(true);
		data.removeAllContainerFilters();
		tableService.setContainerDataSource(data);

		tableService.setVisibleColumns(new Object[] {bundle.getString("code"),bundle.getString("procedure"),bundle.getString("required"),bundle.getString("annex"),bundle.getString("situation")," "});
		tableService.setColumnExpandRatio(bundle.getString("procedure"), 1f);
		tableService.addValueChangeListener(new ValueChangeListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				visualizar(tableService.getItem(tableService.getValue()));
			} 
		});

		tableService.setImmediate(true);
		defaultTable();
		return tableService;
	}

	public void defaultTable() {
		data.removeAllItems();
		ArrayList<ServicoProcedimento> servicoProcedimentos = ServicoProcedimento.listaServicoProcedimento(servico.getId(),client.getOauth().getApiKey());
		for(ServicoProcedimento servicoProcedimento : servicoProcedimentos){
			data.addTransaction(servicoProcedimento);
		}
	}

	public class TransactionsContainer extends com.vaadin.data.util.IndexedContainer {

		private static final long serialVersionUID = 1L;

		public TransactionsContainer() {

			addContainerProperty(bundle.getString("id"), Long.class, -1);
			addContainerProperty(bundle.getString("code"), String.class, "");
			addContainerProperty(bundle.getString("procedure"), String.class, "");
			addContainerProperty(bundle.getString("situation"), ComboBox.class, new ComboBox());
			addContainerProperty(bundle.getString("required"), CheckBox.class, new CheckBox());
			addContainerProperty(bundle.getString("annex"), CheckBox.class, new CheckBox());
			addContainerProperty(" ", Button.class, new Button());
		}

		@SuppressWarnings("unchecked")
		public void addTransaction(IServicoProcedimento servicoProcedimento) {
			Object id = addItem();
			com.vaadin.data.Item item = getItem(id);
			if (item != null) {
				item.getItemProperty(bundle.getString("id")).setValue(servicoProcedimento.getServico().getId());
				item.getItemProperty(bundle.getString("code")).setValue(servicoProcedimento.getProcedimento().getCodigo());
				
				item.getItemProperty(bundle.getString("procedure")).setValue(servicoProcedimento.getProcedimento().getTitulo());
				
				CheckBox checkBoxObrigatorio = new CheckBox();
				checkBoxObrigatorio.setValue(servicoProcedimento.isObrigatorio());
				item.getItemProperty(bundle.getString("required")).setValue(checkBoxObrigatorio);
						
				CheckBox checkBoxAnexo = new CheckBox();
				checkBoxAnexo.setValue(servicoProcedimento.isAnexo());
				item.getItemProperty(bundle.getString("annex")).setValue(checkBoxAnexo);
	
				ComboBox comboBox = ComponenteFactory.createComboboxStatus(servicoProcedimento.getStatusModel());
				comboBox.setWidth("80");
				item.getItemProperty(bundle.getString("situation")).setValue(comboBox);

				Button save = new Button();
				save.setIcon(new ThemeResource("../reindeer/Icons/save.png"));
				save.setImmediate(true);
				save.setWidth("38px");
				save.setHeight("-1px");
				save.addStyleName("newicon");

				ItemView itemC = new ItemView(servicoProcedimento, item);
				save.setData(itemC);
				save.addClickListener(new SaveListener());
				item.getItemProperty(" ").setValue(save);
				
				}
		}
	}
	
	private class SaveListener implements Button.ClickListener {
		
		private static final long serialVersionUID = 1L;

		@Override
		public void buttonClick(ClickEvent event) {
			ItemView data = (ItemView) event.getButton().getData();
			
			ServicoProcedimento servicoProcedimento = (ServicoProcedimento) data.servicoOrdem;
			
			ComboBox comboBoxStatus = (ComboBox) data.item.getItemProperty(bundle.getString("situation")).getValue();
			CheckBox checkBoxObrigatorio = (CheckBox) data.item.getItemProperty(bundle.getString("required")).getValue();
			CheckBox checkBoxAnexo = (CheckBox) data.item.getItemProperty(bundle.getString("annex")).getValue();

			servicoProcedimento.setStatusModel((Integer) comboBoxStatus.getValue());
			servicoProcedimento.setObrigatorio(checkBoxObrigatorio.getValue());
			servicoProcedimento.setAnexo(checkBoxAnexo.getValue());
			servicoProcedimento.alteraServicoProcedimento();
			
		}        
	}
	
	public void visualizar(Object objeto){

	}	

	@Override
	public IServicoProcedimento commit() {
		return null;
	}

	@Override
	public void initData(IServicoProcedimento data) {}

	@Override
	public void modoView() {
	}

	@Override
	public void modoAdd() {
		serviceFormWindows = new SearchFormWindowProcedimento<IProcedimento>(client, ServiceProcedimentoView.this,0,"servico/busca",IProcedimento.class,
				new TransactionsContainerProcedimento(),bundle.getString("code"),bundle.getString("procedure"));
		getUI().addWindow(serviceFormWindows);
	}

	@Override
	public void commitWindows(int resultTag) throws ViewException {
		try {
			IProcedimento procedimento = serviceFormWindows.commit();
			
			ServicoProcedimento servicoProcedimento = new ServicoProcedimento();
			servicoProcedimento.setProcedimento(procedimento);
			servicoProcedimento.setServico(new br.com.servico.model.Servico(servico.getId()));
			servicoProcedimento.setObrigatorio(true);
			servicoProcedimento.setAnexo(false);
			servicoProcedimento.setConsumerId(Long.parseLong(client.getOauth().getApiKey()));
			try {
				servicoProcedimento.salvar();
				defaultTable();
			} catch (ModelException e1) {
				Notification.show(bundle.getString("procedurealreadyregisteredforthisservice"));			}
			
			try{
				//data.addTransaction(servicoOrdem);
			}catch (Exception e) {
				tableService.refreshRowCache();
				Notification.show(bundle.getString("failedtrylater") + e.getMessage());
			}

		} catch (ViewException e) {
			
		}
	}
	
	class ItemView{
		public IServicoProcedimento servicoOrdem;
		public com.vaadin.data.Item item;
		
		public ItemView(IServicoProcedimento servicoOrdem, com.vaadin.data.Item item){
			this.servicoOrdem = servicoOrdem;
			this.item = item;
		}
	}

}
