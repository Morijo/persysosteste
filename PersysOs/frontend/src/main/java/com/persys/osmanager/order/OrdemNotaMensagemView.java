package com.persys.osmanager.order;

import com.persys.osmanager.componente.helper.AttrDim;
import com.persys.osmanager.data.TransactionsContainerNotaData;
import com.restmb.RestMBClient;
import com.restmb.types.OrdemServico;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;

/** 
@author Ricardo Sabatine
@version Revision 1.1

Form para o contrato

@since 07/10/2013
*/
@SuppressWarnings("hiding")
public class OrdemNotaMensagemView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private VerticalLayout mainLayout;
	
	private Table tableNotas = null;
	private final TransactionsContainerNotaData dataNota = new TransactionsContainerNotaData();
	private RestMBClient client = null;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public OrdemNotaMensagemView(RestMBClient client) {
		this.client = client;
		
		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

		@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth(AttrDim.FORM_WIDTH);
		setHeight(AttrDim.FORM_HEIGHT);
		
		// buttonSalvar
   		Button buttonAdicionar = new Button("Adicionar Nota",new Button.ClickListener() {
   		            /**
   					 * BOT?????????O SALVAR
   					 */
   					private static final long serialVersionUID = 1L;

   					// inline click-listener
   		            public void buttonClick(ClickEvent event) {
   		            	//modoAdd();
   		            }
   		        });
   		
   		
   		buttonAdicionar.setWidth("-1px");
   		buttonAdicionar.setHeight("-1px");
   		buttonAdicionar.setVisible(true);
   		buttonAdicionar.addStyleName("wide");
   		buttonAdicionar.addStyleName("default");
       	//mainLayout.addComponent(buttonAdicionar);
   		//mainLayout.setComponentAlignment(buttonAdicionar, new Alignment(34));
     
		mainLayout.addComponent(modoTabela());
		mainLayout.setExpandRatio(tableNotas, 1f);
		
		return mainLayout;
	}
	
	 public Table modoTabela(){
		   tableNotas = new Table() {
		        /**
				 * 
				 */
				private static final long serialVersionUID = 1L;

				@Override
		        protected String formatPropertyValue(Object rowId, Object colId,
		                Property<?> property) {
		          
		            return super.formatPropertyValue(rowId, colId, property);
		        }
		    };
		   tableNotas.setSizeFull();
		   tableNotas.addStyleName("borderless");
		   tableNotas.setSelectable(true);
		   tableNotas.setColumnCollapsingAllowed(true);
		   tableNotas.setColumnReorderingAllowed(true);
		   tableNotas.setContainerDataSource(dataNota);

		   tableNotas.addValueChangeListener(new ValueChangeListener() {
		        /**
				 * 
				 */
				private static final long serialVersionUID = 1L;
		
				@Override
		        public void valueChange(ValueChangeEvent event) {
		                visualizar(tableNotas.getItem(tableNotas.getValue()));
		            } 
		    });
		    
		   tableNotas.setImmediate(true);
		   return tableNotas;
		}
	
		private boolean filterByProperty(String prop, Item item, String text) {
		    if (item == null || item.getItemProperty(prop) == null
		            || item.getItemProperty(prop).getValue() == null)
		        return false;
		    String val = item.getItemProperty(prop).getValue().toString().trim()
		            .toLowerCase();
		    if (val.startsWith(text.toLowerCase().trim()))
		        return true;
		    return false;
		}


	public void defaultTable(OrdemServico ordem) {
		   dataNota.removeAllItems();
		  	try{
		  	  dataNota.load(client,"/ordem/"+ordem.getId()+"/nota");
		    }catch (Exception e) {
		    	System.out.println(e.getMessage());
		    }
		}


	public void visualizar(Object objeto){
		
	}	
	
}
