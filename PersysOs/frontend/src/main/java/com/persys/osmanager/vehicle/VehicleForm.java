package com.persys.osmanager.vehicle;

import java.math.BigDecimal;
import java.util.Locale;
import java.util.ResourceBundle;
import org.vaadin.addons.maskedtextfield.DecimalField;
import br.com.model.interfaces.IVeiculo;
import com.persys.osmanager.componente.ComponenteFactory;
import com.persys.osmanager.componente.helper.AttrDim;
import com.persys.osmanager.componente.interfaces.IForm;
import com.persys.osmanager.data.AppData;
import com.persys.osmanager.exception.ViewException;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class VehicleForm extends CustomComponent implements IForm<IVeiculo>{

	private static final long serialVersionUID = 1L;
	
	private TextArea  textAreaDescricao;
	private TextField textFieldMarca;
	private TextField textFieldCor;
	private TextField textFieldVeiculo;
	private ComboBox  comboBoxStatus;
	private TextField textFieldCodigo;
	private TextField textFieldPlaca;
	private TextField textFieldRenavam;
	private TextField textFieldHodometro;
	private TextField textFieldCapacidadeTanque;
	private TextField textFieldConsumo;
	
	private final ComponenteFactory componenteFactory = new ComponenteFactory();
	
	private IVeiculo veiculo = null;
	
	private final static ResourceBundle bundle;
	private static String error = null;
	
	static{
		 bundle = ResourceBundle.getBundle("com/persys/frontend/vehicle",Locale.getDefault());
		 error = bundle.getString("requirederror");
	}
	
	public VehicleForm() {
		setWidth("100.0%");
		setHeight("100.0%");
		setCompositionRoot(buildMainLayout());
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		VerticalLayout mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		
		mainLayout.addComponent(buildHorizontalLayoutStatus());
		mainLayout.addComponent(buildHorizontalLayoutVeiculo());
		mainLayout.addComponent(buildHorizontalLayout());
		mainLayout.addComponent(buildHorizontalLayoutHodometro());
		mainLayout.addComponent(buildHorizontalLayoutConsumo());
						
		textAreaDescricao = new TextArea();
		textAreaDescricao.setCaption(bundle.getString("description"));
		textAreaDescricao.setImmediate(false);
		textAreaDescricao.setWidth(AttrDim.FORM_COM_SINGLE_WIDTH);
		textAreaDescricao.setHeight("-1px");
		mainLayout.addComponent(textAreaDescricao);
			
		return mainLayout;
	}


	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout() {
		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setImmediate(false);
		horizontalLayout.setWidth("-1px");
		horizontalLayout.setHeight("-1px");
		horizontalLayout.setSpacing(true);
		
		textFieldCor = new TextField();
		textFieldCor.setCaption(bundle.getString("color"));
		textFieldCor.setImmediate(false);
		textFieldCor.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		textFieldCor.setHeight("-1px");
		horizontalLayout.addComponent(textFieldCor);
		
		textFieldMarca = new TextField();
		textFieldMarca.setCaption(bundle.getString("brand"));
		textFieldMarca.setImmediate(false);
		textFieldMarca.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		textFieldMarca.setHeight("-1px");
		horizontalLayout.addComponent(textFieldMarca);
		
		return horizontalLayout;
	}
	
	@AutoGenerated
	private HorizontalLayout buildHorizontalLayoutVeiculo() {
		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setImmediate(false);
		horizontalLayout.setWidth("-1px");
		horizontalLayout.setHeight("-1px");
		horizontalLayout.setSpacing(true);
		
		textFieldPlaca = new TextField();
		textFieldPlaca.setCaption(bundle.getString("licenseplate"));
		textFieldPlaca.setImmediate(false);
		textFieldPlaca.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		textFieldPlaca.setHeight("-1px");
		textFieldPlaca.setRequired(true);
		textFieldPlaca.setRequiredError("Placa é campo obrigatório");
		horizontalLayout.addComponent(textFieldPlaca);
		
		textFieldVeiculo = new TextField();
		textFieldVeiculo.setCaption(bundle.getString("name"));
		textFieldVeiculo.setImmediate(false);
		textFieldVeiculo.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		textFieldVeiculo.setHeight("-1px");
		textFieldVeiculo.setRequired(true);
		textFieldVeiculo.setRequiredError("Veículo é campo obrigatório");
		
		horizontalLayout.addComponent(textFieldVeiculo);
		
		return horizontalLayout;
	}
	
	@SuppressWarnings("deprecation")
	@AutoGenerated
	private HorizontalLayout buildHorizontalLayoutStatus() {
		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setImmediate(false);
		horizontalLayout.setWidth("-1px");
		horizontalLayout.setHeight("-1px");
		horizontalLayout.setMargin(false);
		horizontalLayout.setSpacing(true);
		
		textFieldCodigo = new TextField();
		textFieldCodigo.setCaption(bundle.getString("code"));
		textFieldCodigo.setImmediate(false);
		textFieldCodigo.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		textFieldCodigo.setHeight("-1px");
		horizontalLayout.addComponent(textFieldCodigo);
	
		comboBoxStatus = componenteFactory.createComboBoxRequiredError(new ComboBox(), bundle.getString("status"), error);
		comboBoxStatus.setContainerDataSource(AppData.listStatusInteger());
		comboBoxStatus.setItemCaptionMode(ComboBox.ITEM_CAPTION_MODE_PROPERTY);
		comboBoxStatus.setItemCaptionPropertyId("statusNome");
		comboBoxStatus.setNullSelectionAllowed(false);
		horizontalLayout.addComponent(comboBoxStatus);
		
		return horizontalLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayoutConsumo() {
		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setImmediate(false);
		horizontalLayout.setWidth("-1px");
		horizontalLayout.setHeight("-1px");
		horizontalLayout.setSpacing(true);
		
		textFieldCapacidadeTanque = new DecimalField();
		textFieldCapacidadeTanque.setCaption(bundle.getString("capacitytank"));
		textFieldCapacidadeTanque.setImmediate(true);
		textFieldCapacidadeTanque.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		textFieldCapacidadeTanque.setHeight("-1px");
		horizontalLayout.addComponent(textFieldCapacidadeTanque);
		
		textFieldConsumo = new DecimalField();
		textFieldConsumo.setCaption(bundle.getString("consumptionpattern"));
		textFieldConsumo.setImmediate(true);
		textFieldConsumo.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		textFieldConsumo.setHeight("-1px");
		horizontalLayout.addComponent(textFieldConsumo);
		
		return horizontalLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayoutHodometro() {
		// common part: create layout
		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setImmediate(false);
		horizontalLayout.setWidth("-1px");
		horizontalLayout.setHeight("-1px");
		horizontalLayout.setSpacing(true);
		
		// textFieldCodigoBarra
		textFieldHodometro = new TextField();
		textFieldHodometro.setCaption(bundle.getString("initialodometer"));
		textFieldHodometro.setImmediate(false);
		textFieldHodometro.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		textFieldHodometro.setHeight("-1px");
		horizontalLayout.addComponent(textFieldHodometro);
		
		// textFieldMarca
		textFieldRenavam = new TextField();
		textFieldRenavam.setCaption(bundle.getString("renavam"));
		textFieldRenavam.setImmediate(false);
		textFieldRenavam.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		textFieldRenavam.setHeight("-1px");
		horizontalLayout.addComponent(textFieldRenavam);
		
		return horizontalLayout;
	}

	
	@Override
	public IVeiculo commit() throws ViewException {
			textFieldVeiculo.validate();
			textFieldPlaca.validate();
			veiculo.setCodigo(textFieldCodigo.getValue());
			veiculo.setPlaca(textFieldPlaca.getValue());
			veiculo.setRenavam(textFieldRenavam.getValue());
			veiculo.setMarca(textFieldMarca.getValue());
			veiculo.setNome(textFieldVeiculo.getValue());
			veiculo.setDescricao(textAreaDescricao.getValue());
			veiculo.setStatusModel((Integer)comboBoxStatus.getValue());
			
			if(!textFieldCapacidadeTanque.getValue().isEmpty())
				veiculo.setCapacidadeTanque(new BigDecimal(textFieldCapacidadeTanque.getValue()));
			
			if(!textFieldConsumo.getValue().isEmpty())
				veiculo.setConsumoPadrao(new BigDecimal(textFieldConsumo.getValue()));
			
			
			System.out.println(veiculo.getCapacidadeTanque());
			veiculo.setCor(textFieldCor.getValue());
			return veiculo;
	}
	
	@Override
	public void initData(IVeiculo data) {
		
		textFieldCodigo.setReadOnly(false);
		textFieldCodigo.setValue(data.getCodigo());
		textFieldPlaca.setValue(data.getPlaca());
		textAreaDescricao.setValue(data.getDescricao());
		textFieldMarca.setValue(data.getMarca());
		textFieldVeiculo.setValue(data.getNome());
		textFieldCapacidadeTanque.setValue(data.getNome());
		textFieldConsumo.setValue(data.getNome());
		textFieldCor.setValue(data.getCor());
		
		if(data.getHodometroInicial() == null)
			textFieldHodometro.setValue("");
		else
			textFieldHodometro.setValue(data.getHodometroInicial().toString());
		textFieldRenavam.setValue(data.getRenavam());
		comboBoxStatus.select(data.getStatusModel());
		
		veiculo = data;
		
	}

	@Override
	public void modoView() {
		textFieldCodigo.setReadOnly(true);
	}

	@Override
	public void modoAdd() {
		textFieldCodigo.setReadOnly(true);
	}

}
