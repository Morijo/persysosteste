package com.persys.osmanager.employee;

import java.net.URL;
import java.util.List;
import br.com.model.interfaces.IOrdem;
import com.persys.osmanager.componente.ComponenteFactory;
import com.persys.osmanager.componente.helper.AttrDim;
import com.persys.osmanager.componente.interfaces.IForm;
import com.persys.osmanager.employee.data.TransactionsContainerEmployeeData;
import com.persys.osmanager.exception.ViewException;
import com.restmb.Connection;
import com.restmb.RestMBClient;
import com.restmb.oauth.service.ParameterList;
import com.restmb.types.AgendaOrdemFuncionario;
import com.restmb.types.Funcionario;
import com.restmb.types.OrdemServico;
import com.restmb.types.Produto;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.server.ExternalResource;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Image;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;

/** 
@author Ricardo Sabatine
@version Revision 1.1

Form para o contrato

@since 07/10/2013
 */
public class EmployeeOrderView extends CustomComponent implements IForm<AgendaOrdemFuncionario>{

	private static final long serialVersionUID = 1L;
	private Table tableEmployee = null;
	private TransactionsContainer data = new TransactionsContainer();
	private IOrdem ordem = null;
	private RestMBClient client = null;

	public EmployeeOrderView(RestMBClient client, IOrdem ordem) {
		this.client = client;
		this.ordem = ordem;

		setWidth(AttrDim.FORM_WIDTH);
		setHeight(AttrDim.FORM_HEIGHT);
		setCompositionRoot(buildMainLayout());

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		VerticalLayout mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		mainLayout.addComponent(buildEmployeeSelectLayout());
		mainLayout.addComponent(modoTabela());
		mainLayout.setExpandRatio(tableEmployee, 1f);

		return mainLayout;
	}

	private HorizontalLayout buildEmployeeSelectLayout() {
		HorizontalLayout selectFun = new HorizontalLayout();
		selectFun.setSpacing(true);
		selectFun.setMargin(true);
		selectFun.setImmediate(true);
		selectFun.setSizeFull();

		final ComboBox comboBoxFuncionario = new ComboBox();
		comboBoxFuncionario.setSizeFull();
		comboBoxFuncionario.setContainerDataSource(TransactionsContainerEmployeeData.loadBean(client, "/funcionario"));
		comboBoxFuncionario.setNullSelectionAllowed(false); 
		comboBoxFuncionario.select(0);
		comboBoxFuncionario.setImmediate(true); 
		selectFun.addComponent(comboBoxFuncionario);
		selectFun.setExpandRatio(comboBoxFuncionario, 1f);

		Button buttonAdicionar = new Button("Adicionar",new Button.ClickListener() {

			private static final long serialVersionUID = 1L;

			// inline click-listener
			public void buttonClick(ClickEvent event) {
				AgendaOrdemFuncionario agendaOrdemFuncionario;
				try {
					agendaOrdemFuncionario = adicionaAgendamento(client, (OrdemServico) ordem, (Funcionario) comboBoxFuncionario.getValue());
					data.addTransaction(agendaOrdemFuncionario);
				} catch (ViewException e) {
					Notification.show(e.getMessage());
				}
			}
		});

		buttonAdicionar.setWidth("-1px");
		buttonAdicionar.setHeight("-1px");
		buttonAdicionar.setVisible(true);
		buttonAdicionar.addStyleName("wide");
		buttonAdicionar.addStyleName("default");
		selectFun.addComponent(buttonAdicionar);
		selectFun.setComponentAlignment(buttonAdicionar, new Alignment(34));
		return selectFun;
	}

	public Table modoTabela(){
		tableEmployee = new Table();
		tableEmployee.setHeight("300px");
		tableEmployee.setWidth(AttrDim.FORM_WIDTH);
		tableEmployee.setContainerDataSource(data);
		tableEmployee.setVisibleColumns(new Object[] {"Perfil","Nome","Situação"," "});
		tableEmployee.setColumnExpandRatio("Nome", 1f);

		tableEmployee.addValueChangeListener(new ValueChangeListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				visualizar(tableEmployee.getItem(tableEmployee.getValue()));
			} 
		});

		tableEmployee.setImmediate(true);
		defaultTable();
		return tableEmployee;
	}

	public void defaultTable() {
		data.removeAllItems();
		try{
			Connection<AgendaOrdemFuncionario> lista = Produto.listaAll(client,"/ordem/"+ordem.getId()+"/funcionario/agendamento",AgendaOrdemFuncionario.class);

			for(List<AgendaOrdemFuncionario> listaContrato : lista){
				for(AgendaOrdemFuncionario clienteObjetoProduto : listaContrato){
					data.addTransaction(clienteObjetoProduto);
				}
			}
		}catch (Exception e) {}
	}


	public class TransactionsContainer extends com.vaadin.data.util.IndexedContainer {

		private static final long serialVersionUID = 1L;

		public TransactionsContainer() {
			addContainerProperty("Id", Long.class, -1);
			addContainerProperty("Nome", String.class, "");
			addContainerProperty("Perfil", Image.class, new Image());
			addContainerProperty("Situação", ComboBox.class, new ComboBox());
			addContainerProperty(" ", Button.class, new Button());
	
		}

		@SuppressWarnings("unchecked")
		public void addTransaction(AgendaOrdemFuncionario agendaOrdemFuncionario) {
			Object id = addItem();
			com.vaadin.data.Item item = getItem(id);
			if (item != null) {
				item.getItemProperty("Id").setValue(agendaOrdemFuncionario.getId());
				item.getItemProperty("Nome").setValue(agendaOrdemFuncionario.getFuncionario().getRazaoNome());
				final ComboBox comboBox = ComponenteFactory.createComboboxStatus(agendaOrdemFuncionario.getStatusModel());
				comboBox.setData(agendaOrdemFuncionario);
				item.getItemProperty("Situação").setValue(comboBox);

				Image profilePic = new Image();
				URL url= null;
				try {
					url = new URL(agendaOrdemFuncionario.getFuncionario().getImagem());
					url.openStream();
					profilePic.setSource(new  ExternalResource(url));
				
				}catch(Exception e){
					profilePic.setSource(new ThemeResource("img/profile-pic.png"));
				}
				profilePic.setWidth("52px");

				item.getItemProperty("Perfil").setValue(profilePic);

				Button save = new Button();
				save.setIcon(new ThemeResource("../reindeer/Icons/save.png"));
				save.setImmediate(true);
				save.setWidth("38px");
				save.setHeight("-1px");
				save.addStyleName("newicon");

				ItemView itemC = new ItemView(agendaOrdemFuncionario, item);
				save.setData(itemC);
				save.addClickListener(new SaveListener());

				item.getItemProperty(" ").setValue(save);
			}
		}
	}

	private class SaveListener implements Button.ClickListener {

		private static final long serialVersionUID = 1L;

		@Override
		public void buttonClick(ClickEvent event) {
			try{
				ItemView data = (ItemView) event.getButton().getData();

				AgendaOrdemFuncionario agendaOrdemFuncionario = data.agendaOrdemFuncionario;

				ComboBox comboBoxStatus = (ComboBox) data.item.getItemProperty("Situação").getValue();

				agendaOrdemFuncionario.setStatusModel((Integer) comboBoxStatus.getValue());

				com.restmb.oauth.service.ParameterList headers = new ParameterList();
				headers.add("Content-Type", "application/json");
				client.publishChanges("/ordem/funcionario/agendamento/"+agendaOrdemFuncionario.getId(), AgendaOrdemFuncionario.class,agendaOrdemFuncionario.toJson(),headers);
			}catch(Exception e){}

		}        
	}

	private AgendaOrdemFuncionario adicionaAgendamento(final RestMBClient client,
			final OrdemServico ordem, Funcionario funcionario) throws ViewException {
		AgendaOrdemFuncionario agendaOrdemFuncionario = new AgendaOrdemFuncionario();
		agendaOrdemFuncionario.setFuncionario(funcionario);
		agendaOrdemFuncionario.setDataAtribuicao(ordem.getDataAgendamento());
		try{
			return ordem.adicionarFuncionarioExecucao(client, agendaOrdemFuncionario);
		}catch(Exception e){
			throw new ViewException(e.getMessage());
		}	
	}

	public void visualizar(Object objeto){}

	@Override
	public AgendaOrdemFuncionario commit() throws ViewException {
		return null;
	}

	@Override
	public void initData(AgendaOrdemFuncionario data) {}

	@Override
	public void modoView() {}

	@Override
	public void modoAdd() {}	

	class ItemView{
		public AgendaOrdemFuncionario agendaOrdemFuncionario;
		public com.vaadin.data.Item item;

		public ItemView(AgendaOrdemFuncionario agendaOrdemFuncionario, com.vaadin.data.Item item){
			this.agendaOrdemFuncionario = agendaOrdemFuncionario;
			this.item = item;
		}
	}
}
