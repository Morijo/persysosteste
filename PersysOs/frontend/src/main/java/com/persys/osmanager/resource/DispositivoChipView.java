package com.persys.osmanager.resource;

import java.util.Locale;
import java.util.ResourceBundle;

import br.com.model.interfaces.IDispositivo;
import br.com.model.interfaces.IDispositivoChip;
import com.persys.osmanager.componente.helper.AttrDim;
import com.persys.osmanager.componente.interfaces.IFormWindows;
import com.persys.osmanager.data.TransactionsContainer.TransationsContainerTipo;
import com.persys.osmanager.exception.ViewException;
import com.persys.osmanager.resource.data.TransactionsContainerResourceChip;
import com.restmb.RestMBClient;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

/**
 * @author ricardosabatine, jpmorijo
 * @version 1.0.0
 * @since 17/03/2013 Tabela para DispositivoForm Form com a Função de mostrar os numeros Vinculados ao dispositivo
 */
public class DispositivoChipView extends CustomComponent implements
		IFormWindows<IDispositivoChip> {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	private static final long serialVersionUID = 1L;
	private Table tableChip = null;
	private RestMBClient client = null;
	private TransactionsContainerResourceChip data = new TransactionsContainerResourceChip();
	private static final ResourceBundle bundle;
	static {
		bundle = ResourceBundle.getBundle("com/persys/frontend/notification",
				Locale.getDefault());
	}

	public DispositivoChipView(IDispositivo dispositivo) {
		// top-level component properties
		setWidth(AttrDim.FORM_WIDTH);
		setHeight("100%");
		setCompositionRoot(buildMainLayout());
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {

		VerticalLayout mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		mainLayout.addComponent(modoTabela());
		mainLayout.setExpandRatio(tableChip, 1f);

		
		return mainLayout;
	}

	public Table modoTabela() {
		tableChip = new Table() {

			private static final long serialVersionUID = 1L;

			@Override
			protected String formatPropertyValue(Object rowId, Object colId,
					Property<?> property) {

				return super.formatPropertyValue(rowId, colId, property);
			}
		};
		tableChip.setSizeFull();
		tableChip.addStyleName("borderless");
		tableChip.setSelectable(true);
		tableChip.setColumnCollapsingAllowed(true);
		tableChip.setColumnReorderingAllowed(true);
		data.removeAllContainerFilters();
		tableChip.setContainerDataSource(data);

		tableChip.setVisibleColumns(new Object[] {
				bundle.getString("operator"), bundle.getString("number"),
				bundle.getString("main") });
		tableChip.setColumnExpandRatio(bundle.getString("number"), 1f);
		tableChip.addValueChangeListener(new ValueChangeListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				visualizar(tableChip.getItem(tableChip.getValue()));
			}
		});

		tableChip.setImmediate(true);
		defaultTable();
		return tableChip;
	}

	public void defaultTable() {
		data.loadTable(client, TransationsContainerTipo.BD);
	}
	public void visualizar(Object objeto) {}

	@Override
	public IDispositivoChip commit() {
		return null;
	}
	@Override
	public void modoView() {}
	@Override
	public void modoAdd() {}
	@Override
	public void initData(IDispositivoChip data) {}
	@Override
	public void commitWindows(int resultTag) throws ViewException {}
}
