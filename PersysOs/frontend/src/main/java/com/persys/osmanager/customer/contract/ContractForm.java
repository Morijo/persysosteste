package com.persys.osmanager.customer.contract;

import java.util.Locale;
import java.util.ResourceBundle;

import com.persys.osmanager.componente.ComponenteFactory;
import com.persys.osmanager.componente.ContainerUtils;
import com.persys.osmanager.componente.FormViewWindow;
import com.persys.osmanager.componente.SearchFormWindow;
import com.persys.osmanager.componente.helper.AttrDim;
import com.persys.osmanager.componente.interfaces.IForm;
import com.persys.osmanager.componente.interfaces.IFormWindows;
import com.persys.osmanager.contact.ContactDetalheView;
import com.persys.osmanager.contact.ContactWindow;
import com.persys.osmanager.customer.CustomerDetailView;
import com.persys.osmanager.customer.CustomerMenu;
import com.persys.osmanager.customer.data.TransactionsContainerContractCustomer;
import com.persys.osmanager.customer.data.TransactionsContainerCustomer;
import com.persys.osmanager.data.AppData;
import com.persys.osmanager.exception.ViewException;
import com.persys.osmanager.organization.UnidadeForm;
import com.persys.osmanager.organization.data.TransactionsContainerUnidade;
import com.restmb.RestMBClient;
import com.restmb.types.Cliente;
import com.restmb.types.Contato;
import com.restmb.types.Contrato;
import com.restmb.types.Unidade;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.LayoutEvents.LayoutClickEvent;
import com.vaadin.event.LayoutEvents.LayoutClickListener;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.CloseListener;

/** 
@author Ricardo Sabatine
@version Revision 1.1

Form para o contrato

@since 07/10/2013
 */
public class ContractForm extends CustomComponent implements IFormWindows<Contrato>, IForm<Contrato>{

	private static final long serialVersionUID = 1L;

	private ComboBox comboBoxStatus;
	private ComboBox comboBoxTipoSituacao;
	private ComboBox comboBoxProrrogavel;
	private ComboBox comboBoxFidelidade;
	private ComboBox comboBoxUnidade;
	private Button   buttonCliente;
	private Button   buttonEndereco;
	private CustomerDetailView customerDetailView;
	private ContactDetalheView contactDetalheView;
	private DateField dataAssinatura;
	private DateField dataVigenciaInicio;
	private DateField dataVigenciaFim;
	private TextField textFieldCodigo;
	private TextArea textFieldDescricao;
	private TabSheet abas = null;
	private Cliente  cliente = null;
	private Contrato contrato = new Contrato();
	private RestMBClient client = null;
	
	private final static ResourceBundle bundle;
	private static String errorMessage;
	private final ComponenteFactory componenteFactory = new ComponenteFactory();

	private SearchFormWindow<Cliente> contratoClienteFormWindows = null;
	private ContactWindow contactWindow = null;

	private static int RESULT_TAG_CUSTOMER = 0;
	private static int RESULT_TAG_CONTACT = 1;

	private boolean clienteFlagWindows = false;
	private boolean contatoFlagWindows = false;


	static{
		bundle = ResourceBundle.getBundle("com/persys/frontend/contract",Locale.getDefault());
		errorMessage = bundle.getString("requirederror");
	}

	public ContractForm(RestMBClient client) {
		this.client = client;

		setWidth(AttrDim.FORM_WIDTH);
		setHeight(AttrDim.FORM_HEIGHT);

		setCompositionRoot(buildMainLayout());
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		VerticalLayout mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		mainLayout.addComponent(buildHorizontalLayoutStatus());

		mainLayout.addComponent(buildHorizontalLayoutCliente());

		mainLayout.addComponent(buildHorizontalLayoutUnidade());

		mainLayout.addComponent(buildHorizontalLayoutFidelidadeProrrogavel());

		mainLayout.addComponent(buildHorizontalLayoutTipoAssinatura());

		mainLayout.addComponent(buildHorizontalLayoutDatas());

		textFieldDescricao = componenteFactory.createTextAreaRequiredError(new TextArea(), 
				bundle.getString("description"), errorMessage, AttrDim.FORM_COM_SINGLE_WIDTH);
		textFieldDescricao.setHeight("-1px");

		mainLayout.addComponent(textFieldDescricao);

		mainLayout.addComponent(buildHorizontalLayoutAbas());

		return mainLayout;
	}

	@SuppressWarnings("deprecation")
	private HorizontalLayout buildHorizontalLayoutUnidade() {
		HorizontalLayout horizontalLayout = createHorizontalLayout();

		HorizontalLayout horizontalLayoutUnidade = createHorizontalLayout();
		horizontalLayoutUnidade.setSpacing(false);

		comboBoxUnidade = new ComboBox();
		comboBoxUnidade.setCaption(bundle.getString("unit"));
		comboBoxUnidade.setImmediate(true);
		comboBoxUnidade.setWidth(AttrDim.FORM_COM_SINGLE_WIDTH);
		comboBoxUnidade.setHeight("-1px");
		comboBoxUnidade.setContainerDataSource(TransactionsContainerUnidade.listUnidade(client));
		comboBoxUnidade.setNullSelectionAllowed(false);

		horizontalLayoutUnidade.addComponent(comboBoxUnidade);

		Button buttonNovoUnidade = new Button();
		createButtonPlus(buttonNovoUnidade,"plus.png");
		buttonNovoUnidade.addListener(new ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				Window window = new FormViewWindow<Unidade>(client, "Nova Unidade", new UnidadeForm(), new Unidade());
				getUI().addWindow(window);
				window.addListener(new CloseListener() {
					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public void windowClose(CloseEvent e) {
						loadUnidade();
					}
				});
			}
		});
		horizontalLayoutUnidade.addComponent(buttonNovoUnidade);
		horizontalLayoutUnidade.setComponentAlignment(buttonNovoUnidade, Alignment.BOTTOM_CENTER);

		horizontalLayout.addComponent(horizontalLayoutUnidade);

		return horizontalLayout;
	}

	@SuppressWarnings("deprecation")
	@AutoGenerated
	private HorizontalLayout buildHorizontalLayoutStatus() {
		HorizontalLayout horizontalLayout = createHorizontalLayout();

		textFieldCodigo = new TextField();
		textFieldCodigo.setCaption(bundle.getString("code"));
		textFieldCodigo.setImmediate(false);
		textFieldCodigo.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		textFieldCodigo.setHeight("-1px");
		horizontalLayout.addComponent(textFieldCodigo);

		comboBoxStatus = componenteFactory.createComboBoxRequiredError(new ComboBox(), bundle.getString("status"), errorMessage);
		comboBoxStatus.setContainerDataSource(AppData.listStatusInteger());
		comboBoxStatus.setItemCaptionMode(ComboBox.ITEM_CAPTION_MODE_PROPERTY);
		comboBoxStatus.setItemCaptionPropertyId("statusNome");
		comboBoxStatus.setNullSelectionAllowed(false);
		horizontalLayout.addComponent(comboBoxStatus);

		return horizontalLayout;
	}

	@SuppressWarnings("deprecation")
	private HorizontalLayout buildHorizontalLayoutFidelidadeProrrogavel() {
		HorizontalLayout horizontalLayout = createHorizontalLayout();

		// comboBoxStatus
		comboBoxFidelidade = new ComboBox();
		comboBoxFidelidade.setCaption(bundle.getString("fidelity"));
		comboBoxFidelidade.setImmediate(false);
		comboBoxFidelidade.setContainerDataSource(ContainerUtils.listaStatusBean());
		comboBoxFidelidade.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		comboBoxFidelidade.setHeight("-1px");
		comboBoxFidelidade.setContainerDataSource(AppData.listStatusBoolean());
		comboBoxFidelidade.setItemCaptionMode(ComboBox.ITEM_CAPTION_MODE_PROPERTY);
		comboBoxFidelidade.setItemCaptionPropertyId("statusNome");
		comboBoxFidelidade.setNullSelectionAllowed(false);
		horizontalLayout.addComponent(comboBoxFidelidade);

		// comboBoxStatus
		comboBoxProrrogavel = new ComboBox();
		comboBoxProrrogavel.setCaption(bundle.getString("extendable"));
		comboBoxProrrogavel.setImmediate(false);
		comboBoxProrrogavel.setContainerDataSource(ContainerUtils.listaStatusBean());
		comboBoxProrrogavel.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		comboBoxProrrogavel.setHeight("-1px");
		comboBoxProrrogavel.setContainerDataSource(AppData.listStatusBoolean());
		comboBoxProrrogavel.setItemCaptionMode(ComboBox.ITEM_CAPTION_MODE_PROPERTY);
		comboBoxProrrogavel.setItemCaptionPropertyId("statusNome");
		comboBoxProrrogavel.setNullSelectionAllowed(false);
		horizontalLayout.addComponent(comboBoxProrrogavel);

		return horizontalLayout;
	}
	private HorizontalLayout buildHorizontalLayoutTipoAssinatura() {
		HorizontalLayout horizontalLayout = createHorizontalLayout();

		comboBoxTipoSituacao = componenteFactory.createComboBoxRequiredError(new ComboBox(), bundle.getString("statuscontract"), errorMessage);
		comboBoxTipoSituacao.setImmediate(false);
		comboBoxTipoSituacao.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		comboBoxTipoSituacao.setHeight("-1px");
		comboBoxTipoSituacao.setNullSelectionAllowed(false);
		comboBoxTipoSituacao.setContainerDataSource(TransactionsContainerContractCustomer.listSituacaoContrato());
		horizontalLayout.addComponent(comboBoxTipoSituacao);

		// textFieldCodigo
		dataAssinatura = new DateField();
		dataAssinatura.setCaption(bundle.getString("datesignature"));
		dataAssinatura.setImmediate(false);
		dataAssinatura.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		dataAssinatura.setHeight("-1px");
		horizontalLayout.addComponent(dataAssinatura);

		return horizontalLayout;
	}

	private HorizontalLayout buildHorizontalLayoutDatas() {
		HorizontalLayout horizontalLayout = createHorizontalLayout();

		dataVigenciaInicio = new DateField();
		dataVigenciaInicio.setCaption(bundle.getString("effectivedate"));
		dataVigenciaInicio.setImmediate(false);
		dataVigenciaInicio.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		dataVigenciaInicio.setHeight("-1px");
		horizontalLayout.addComponent(dataVigenciaInicio);

		dataVigenciaFim = new DateField();
		dataVigenciaFim.setCaption(bundle.getString("effectiveend"));
		dataVigenciaFim.setImmediate(false);
		dataVigenciaFim.setWidth(AttrDim.FORM_COM_DOUBLE_WIDTH);
		dataVigenciaFim.setHeight("-1px");
		horizontalLayout.addComponent(dataVigenciaFim);

		return horizontalLayout;
	}

	private Panel buildHorizontalLayoutCliente() {

		Panel panelCliente = new Panel();
		panelCliente.setWidth("-1px");
		panelCliente.setWidth("-1px");
		panelCliente.setCaption(bundle.getString("customer"));

		VerticalLayout verticalLayout = new VerticalLayout();
		verticalLayout.setImmediate(false);
		verticalLayout.setWidth("-1px");
		verticalLayout.setHeight("-1px");
		verticalLayout.setMargin(true);
		verticalLayout.setSpacing(true);
		panelCliente.setContent(verticalLayout);
		buttonCliente = new Button("Incluir Cliente");
		buttonCliente.setWidth(AttrDim.FORM_COM_SINGLE_WIDTH);
		buttonCliente.setVisible(true);
		buttonCliente.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				loadCliente();
			}
		});
		verticalLayout.addComponent(buttonCliente);

		customerDetailView = new CustomerDetailView(new Cliente());
		customerDetailView.cancelar.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 1L;
			public void buttonClick(ClickEvent event) {
				if(customerDetailView.isVisible()){
					customerDetailView.setVisible(false);
					buttonEndereco.setVisible(false);
					buttonCliente.setVisible(true);
					contactDetalheView.setVisible(false);
					cliente = null;
				}
			}
		});

		customerDetailView.addLayoutClickListener(new LayoutClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void layoutClick(LayoutClickEvent event) {
				if(!clienteFlagWindows){
					viewCliente();
					clienteFlagWindows = true;
				}	
			}		
		});
		customerDetailView.setVisible(false);
		verticalLayout.addComponent(customerDetailView);

		buttonEndereco = new Button("Incluir Endereço");
		buttonEndereco.setWidth(AttrDim.FORM_COM_SINGLE_WIDTH);
		buttonEndereco.setVisible(false);
		buttonEndereco.addClickListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				loadEndereco();
			}
		});
		verticalLayout.addComponent(buttonEndereco);

		contactDetalheView = new ContactDetalheView(new Contato());
		contactDetalheView.setVisible(false);
		contactDetalheView.addLayoutClickListener(new LayoutClickListener() {
			private static final long serialVersionUID = 1L;

			public void layoutClick(LayoutClickEvent event) {
				if(!contatoFlagWindows){
					contatoFlagWindows = true;
					loadEndereco();
				}
			}
		});
		verticalLayout.addComponent(contactDetalheView);

		return panelCliente;
	}


	private HorizontalLayout buildHorizontalLayoutAbas() {
		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setImmediate(false);
		horizontalLayout.setWidth(AttrDim.FORM_COM_SINGLE_WIDTH);
		horizontalLayout.setHeight("-1px");
		horizontalLayout.setMargin(false);
		horizontalLayout.setSpacing(true);

		abas = new TabSheet();
		abas.setHeight("300px");
		abas.setVisible(false);

		horizontalLayout.addComponent(abas);

		return horizontalLayout;
	}

	private HorizontalLayout createHorizontalLayout() {
		HorizontalLayout horizontalLayout = new HorizontalLayout();
		horizontalLayout.setImmediate(false);
		horizontalLayout.setWidth("-1px");
		horizontalLayout.setHeight("-1px");
		horizontalLayout.setMargin(false);
		horizontalLayout.setSpacing(true);
		return horizontalLayout;
	}

	private void createButtonPlus(Button buttonNovoUnidade, String icon) {
		buttonNovoUnidade.setIcon(new ThemeResource("../reindeer/Icons/"+icon));
		buttonNovoUnidade.setImmediate(true);
		buttonNovoUnidade.setWidth("30px");
		buttonNovoUnidade.setHeight("-1px");
		buttonNovoUnidade.addStyleName("newicon");
	}

	private void setLayoutCustomer() {
		customerDetailView.setCliente(cliente);
		customerDetailView.setVisible(true);
		buttonCliente.setVisible(false);
		buttonEndereco.setVisible(true);
	}

	private void setLayoutContact(Contato contato) {
		contactDetalheView.setContatoEndereco(contato);
		contactDetalheView.setWidth("100%");
		contactDetalheView.setVisible(true);
		buttonEndereco.setVisible(false);
	}

	public void loadEndereco(){
		contactWindow = new ContactWindow(client, cliente, this,RESULT_TAG_CONTACT);
		contactWindow.initData(contactDetalheView.getContato());
		getUI().addWindow(contactWindow);
	}

	public void loadCliente(){
		contratoClienteFormWindows = new SearchFormWindow<Cliente>(client, this, RESULT_TAG_CUSTOMER,"cliente/busca",Cliente.class,
				new TransactionsContainerCustomer(),"Codigo","Nome");
		contratoClienteFormWindows.initData("");
		getUI().addWindow(contratoClienteFormWindows);
	}

	protected void viewCliente() {
		Window window = new Window(cliente.getFantasiaSobrenome());
		window.setWidth("1000px");
		window.setHeight("600px");
		window.setModal(true);
		window.center();
		CustomerMenu customerMenu = new CustomerMenu(client);
		customerMenu.initData(this.cliente);
		customerMenu.modoView();
		window.setContent(customerMenu);
		window.addCloseListener(new CloseListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void windowClose(CloseEvent e) {
				clienteFlagWindows = false;
			}
		});

		getUI().addWindow(window);
	}

	private void loadUnidade(){
		comboBoxUnidade.getContainerDataSource().removeAllItems();
		comboBoxUnidade.setContainerDataSource(TransactionsContainerUnidade.listUnidade(client));
	}

	@Override
	public void commitWindows(int resultTag) throws ViewException {
		if(resultTag == RESULT_TAG_CUSTOMER){
			try{
				cliente = contratoClienteFormWindows.commit();
				setLayoutCustomer();
			}catch(Exception e){}
		}if(resultTag == RESULT_TAG_CONTACT){
			Contato contato = contactWindow.commit();
			contrato.setContato(contato);
			setLayoutContact(contato);
		}	
	}

	@Override
	public Contrato commit() throws ViewException {

		componenteFactory.valida();
		
		if(cliente != null){
			contrato.setCliente(cliente);
			contrato.setStatusModel((Integer) comboBoxStatus.getValue());
			contrato.setCodigo(textFieldCodigo.getValue());
			contrato.setDescricaoObjeto(textFieldDescricao.getValue());
			contrato.setDataAssinatura(dataAssinatura.getValue());
			contrato.setDataVigenciaFim(dataVigenciaFim.getValue());
			contrato.setDataVigenciaInicio(dataVigenciaInicio.getValue());
			contrato.setFidelidade((Boolean) comboBoxFidelidade.getValue());
			contrato.setProrrogavel((Boolean) comboBoxProrrogavel.getValue());
			contrato.setSituacao(comboBoxTipoSituacao.getValue().toString());
			contrato.setUnidadeGestora((Unidade) comboBoxUnidade.getValue());
			return contrato;
		}else{
			throw new ViewException("Cliente inválido");
		}
	}

	@Override
	public void initData(Contrato data) {

		comboBoxStatus.select(data.getStatusModel());
		comboBoxFidelidade.select(data.isFidelidade());
		comboBoxProrrogavel.select(data.isProrrogavel());
		textFieldCodigo.setValue(data.getCodigo());
		textFieldDescricao.setValue(data.getDescricaoObjeto());
		dataAssinatura.setValue(data.getDataAssinatura());
		dataVigenciaFim.setValue(data.getDataVigenciaFim());
		dataVigenciaInicio.setValue(data.getDataVigenciaInicio());
		comboBoxUnidade.setValue(data.getUnidadeGestora());
		comboBoxFidelidade.setValue(data.isFidelidade());
		comboBoxTipoSituacao.setValue(data.getSituacao());

		if(data.getCliente() != null && data.getCliente().getRazaoNome() != null){
			cliente = (Cliente) data.getCliente();
			setLayoutCustomer();

			if(data.getContato() != null)
				setLayoutContact(data.getContato());
			else{
				buttonEndereco.setVisible(true);
			}
			buttonCliente.setVisible(false);
		}
		contrato = data;
	}
	
	@Override
	public void modoView() {
		textFieldCodigo.setReadOnly(true);
		abas.setVisible(true);
		abas.addTab(new ContractProdutoView(client, contrato),"Produtos");
		abas.addTab(new ContractOrdemView(client, contrato),"Ordens");

	}

	@Override
	public void modoAdd() {
		textFieldCodigo.setReadOnly(true);
		abas.setVisible(false);
	}
}
